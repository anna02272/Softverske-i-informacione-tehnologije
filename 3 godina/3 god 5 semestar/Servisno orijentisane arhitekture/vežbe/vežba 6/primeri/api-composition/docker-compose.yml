version: "3.8"

services:

  ordering_service:
    image: ordering_service
    container_name: ordering_service
    hostname: ${ORDERING_SERVICE_HOST}
    build:
      context: ./ordering_service/
      dockerfile: Dockerfile
    restart: always
    environment:
      ORDERING_DB_HOST: ${ORDERING_DB_HOST}
      ORDERING_DB_PORT: ${ORDERING_DB_PORT}
      ORDERING_SERVICE_PORT: ${ORDERING_SERVICE_PORT}
      INVENTORY_SERVICE_HOST: ${INVENTORY_SERVICE_HOST}
      INVENTORY_SERVICE_PORT: ${INVENTORY_SERVICE_PORT}
      SHIPPING_SERVICE_HOST: ${SHIPPING_SERVICE_HOST}
      SHIPPING_SERVICE_PORT: ${SHIPPING_SERVICE_PORT}
    depends_on:
      - ordering_db
    networks:
      - network

  shipping_service:
    image: shipping_service
    container_name: shipping_service
    hostname: ${SHIPPING_SERVICE_HOST}
    build:
      context: ./shipping_service/
      dockerfile: Dockerfile
    restart: always
    environment:
      SHIPPING_DB_HOST: ${SHIPPING_DB_HOST}
      SHIPPING_DB_PORT: ${SHIPPING_DB_PORT}
      SHIPPING_SERVICE_PORT: ${SHIPPING_SERVICE_PORT}
    depends_on:
      - shipping_db
    networks:
      - network

  inventory_service:
    image: inventory_service
    container_name: inventory_service
    hostname: ${INVENTORY_SERVICE_HOST}
    build:
      context: ./inventory_service/
      dockerfile: Dockerfile
    restart: always
    environment:
      INVENTORY_DB_HOST: ${INVENTORY_DB_HOST}
      INVENTORY_DB_PORT: ${INVENTORY_DB_PORT}
      INVENTORY_DB_USER: ${INVENTORY_DB_USER}
      INVENTORY_DB_PASS: ${INVENTORY_DB_PASS}
      INVENTORY_DB_NAME: ${INVENTORY_DB_NAME}
      INVENTORY_SERVICE_PORT: ${INVENTORY_SERVICE_PORT}
    depends_on:
      - inventory_db
    networks:
      - network

  catalogue_service:
    image: catalogue_service
    container_name: catalogue_service
    hostname: ${CATALOGUE_SERVICE_HOST}
    build:
      context: ./catalogue-service/
      dockerfile: Dockerfile
    restart: always
    environment:
      CATALOGUE_SERVICE_ADDRESS: ${CATALOGUE_SERVICE_HOST}:${CATALOGUE_SERVICE_PORT}
    networks:
      - network

  api_gateway:
    build:
      context: ./api_gateway/
      dockerfile: Dockerfile
    container_name: api_gateway
    hostname: ${API_GATEWAY_HOST}
    restart: on-failure
    ports:
      - ${API_GATEWAY_PORT}:${API_GATEWAY_PORT}
    depends_on:
      - catalogue_service
      - ordering_service
      - inventory_service
      - shipping_service
    networks:
      - network

  ordering_db:
    image: mongo
    container_name: ordering_db
    restart: on-failure
    networks:
      - network

  shipping_db:
    image: mongo
    container_name: shipping_db
    restart: on-failure
    networks:
      - network

  inventory_db:
    image: postgres
    container_name: inventory_db
    restart: on-failure
    environment:
      POSTGRES_USER: ${INVENTORY_DB_USER}
      POSTGRES_PASSWORD: ${INVENTORY_DB_PASS}
      POSTGRES_DB: ${INVENTORY_DB_NAME}
    networks:
      - network

networks:
  network:
    driver: bridge